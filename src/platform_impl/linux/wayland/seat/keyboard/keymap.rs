//! Convert Wayland keys to winit keys.

use crate::keyboard::{Key, KeyLocation, KeyCode, NativeKeyCode};

pub fn keysym_to_lkey(keysym: u32) -> Key<'static> {
    use sctk::seat::keyboard::keysyms;
    match keysym {
        // todo write a macro for numbers and letters
        // Numbers.
        keysyms::XKB_KEY_1 => Key::Character("1"),
        keysyms::XKB_KEY_2 => Key::Character("2"),
        keysyms::XKB_KEY_3 => Key::Character("3"),
        keysyms::XKB_KEY_4 => Key::Character("4"),
        keysyms::XKB_KEY_5 => Key::Character("5"),
        keysyms::XKB_KEY_6 => Key::Character("6"),
        keysyms::XKB_KEY_7 => Key::Character("7"),
        keysyms::XKB_KEY_8 => Key::Character("8"),
        keysyms::XKB_KEY_9 => Key::Character("9"),
        keysyms::XKB_KEY_0 => Key::Character("0"),
        // Letters.
        keysyms::XKB_KEY_A => Key::Character("A"),
        keysyms::XKB_KEY_a => Key::Character("a"),
        keysyms::XKB_KEY_B => Key::Character("B"),
        keysyms::XKB_KEY_b => Key::Character("b"),
        keysyms::XKB_KEY_C => Key::Character("C"),
        keysyms::XKB_KEY_c => Key::Character("c"),
        keysyms::XKB_KEY_D => Key::Character("D"),
        keysyms::XKB_KEY_d => Key::Character("d"),
        keysyms::XKB_KEY_E => Key::Character("E"),
        keysyms::XKB_KEY_e => Key::Character("e"),
        keysyms::XKB_KEY_F => Key::Character("F"),
        keysyms::XKB_KEY_f => Key::Character("f"),
        keysyms::XKB_KEY_G => Key::Character("G"),
        keysyms::XKB_KEY_g => Key::Character("g"),
        keysyms::XKB_KEY_H => Key::Character("H"),
        keysyms::XKB_KEY_h => Key::Character("h"),
        keysyms::XKB_KEY_I => Key::Character("I"),
        keysyms::XKB_KEY_i => Key::Character("i"),
        keysyms::XKB_KEY_J => Key::Character("J"),
        keysyms::XKB_KEY_j => Key::Character("j"),
        keysyms::XKB_KEY_K => Key::Character("K"),
        keysyms::XKB_KEY_k => Key::Character("k"),
        keysyms::XKB_KEY_L => Key::Character("L"),
        keysyms::XKB_KEY_l => Key::Character("l"),
        keysyms::XKB_KEY_M => Key::Character("M"),
        keysyms::XKB_KEY_m => Key::Character("m"),
        keysyms::XKB_KEY_N => Key::Character("N"),
        keysyms::XKB_KEY_n => Key::Character("n"),
        keysyms::XKB_KEY_O => Key::Character("O"),
        keysyms::XKB_KEY_o => Key::Character("o"),
        keysyms::XKB_KEY_P => Key::Character("P"),
        keysyms::XKB_KEY_p => Key::Character("p"),
        keysyms::XKB_KEY_Q => Key::Character("Q"),
        keysyms::XKB_KEY_q => Key::Character("q"),
        keysyms::XKB_KEY_R => Key::Character("R"),
        keysyms::XKB_KEY_r => Key::Character("r"),
        keysyms::XKB_KEY_S => Key::Character("S"),
        keysyms::XKB_KEY_s => Key::Character("s"),
        keysyms::XKB_KEY_T => Key::Character("T"),
        keysyms::XKB_KEY_t => Key::Character("t"),
        keysyms::XKB_KEY_U => Key::Character("U"),
        keysyms::XKB_KEY_u => Key::Character("u"),
        keysyms::XKB_KEY_V => Key::Character("V"),
        keysyms::XKB_KEY_v => Key::Character("v"),
        keysyms::XKB_KEY_W => Key::Character("W"),
        keysyms::XKB_KEY_w => Key::Character("w"),
        keysyms::XKB_KEY_X => Key::Character("X"),
        keysyms::XKB_KEY_x => Key::Character("x"),
        keysyms::XKB_KEY_Y => Key::Character("Y"),
        keysyms::XKB_KEY_y => Key::Character("y"),
        keysyms::XKB_KEY_Z => Key::Character("Z"),
        keysyms::XKB_KEY_z => Key::Character("z"),
        // Escape.
        keysyms::XKB_KEY_Escape => Key::Escape,
        // Function keys.
        keysyms::XKB_KEY_F1 => Key::F1,
        keysyms::XKB_KEY_F2 => Key::F2,
        keysyms::XKB_KEY_F3 => Key::F3,
        keysyms::XKB_KEY_F4 => Key::F4,
        keysyms::XKB_KEY_F5 => Key::F5,
        keysyms::XKB_KEY_F6 => Key::F6,
        keysyms::XKB_KEY_F7 => Key::F7,
        keysyms::XKB_KEY_F8 => Key::F8,
        keysyms::XKB_KEY_F9 => Key::F9,
        keysyms::XKB_KEY_F10 => Key::F10,
        keysyms::XKB_KEY_F11 => Key::F11,
        keysyms::XKB_KEY_F12 => Key::F12,
        keysyms::XKB_KEY_F13 => Key::F13,
        keysyms::XKB_KEY_F14 => Key::F14,
        keysyms::XKB_KEY_F15 => Key::F15,
        keysyms::XKB_KEY_F16 => Key::F16,
        keysyms::XKB_KEY_F17 => Key::F17,
        keysyms::XKB_KEY_F18 => Key::F18,
        keysyms::XKB_KEY_F19 => Key::F19,
        keysyms::XKB_KEY_F20 => Key::F20,
        keysyms::XKB_KEY_F21 => Key::F21,
        keysyms::XKB_KEY_F22 => Key::F22,
        keysyms::XKB_KEY_F23 => Key::F23,
        keysyms::XKB_KEY_F24 => Key::F24,
        // Flow control.
        keysyms::XKB_KEY_Print => Key::PrintScreen,
        keysyms::XKB_KEY_Scroll_Lock => Key::ScrollLock,
        keysyms::XKB_KEY_Pause => Key::Pause,
        keysyms::XKB_KEY_Insert => Key::Insert,
        keysyms::XKB_KEY_Home => Key::Home,
        keysyms::XKB_KEY_Delete => Key::Delete,
        keysyms::XKB_KEY_End => Key::End,
        keysyms::XKB_KEY_Page_Down => Key::PageDown,
        keysyms::XKB_KEY_Page_Up => Key::PageUp,
        // Arrows.
        keysyms::XKB_KEY_Left => Key::ArrowLeft,
        keysyms::XKB_KEY_Up => Key::ArrowUp,
        keysyms::XKB_KEY_Right => Key::ArrowRight,
        keysyms::XKB_KEY_Down => Key::ArrowDown,

        keysyms::XKB_KEY_BackSpace => Key::Backspace,
        keysyms::XKB_KEY_Return => Key::Enter,
        keysyms::XKB_KEY_space => Key::Space,

        keysyms::XKB_KEY_Multi_key => Key::Compose,

        // Keypad.
        keysyms::XKB_KEY_Num_Lock => Key::NumLock,
        keysyms::XKB_KEY_KP_0 => Key::Character("0"),
        keysyms::XKB_KEY_KP_1 => Key::Character("1"),
        keysyms::XKB_KEY_KP_2 => Key::Character("2"),
        keysyms::XKB_KEY_KP_3 => Key::Character("3"),
        keysyms::XKB_KEY_KP_4 => Key::Character("4"),
        keysyms::XKB_KEY_KP_5 => Key::Character("5"),
        keysyms::XKB_KEY_KP_6 => Key::Character("6"),
        keysyms::XKB_KEY_KP_7 => Key::Character("7"),
        keysyms::XKB_KEY_KP_8 => Key::Character("8"),
        keysyms::XKB_KEY_KP_9 => Key::Character("9"),
        // Misc.
        // => Key::AbntC1,
        // => Key::AbntC2,
        keysyms::XKB_KEY_apostrophe => Key::Character("'"),
        keysyms::XKB_KEY_quotedbl => Key::Character("\""),
        // => Key::Apps,
        keysyms::XKB_KEY_exclam => Key::Character("!"),
        keysyms::XKB_KEY_at => Key::Character("@"),
        keysyms::XKB_KEY_numbersign => Key::Character("#"),
        keysyms::XKB_KEY_dollar => Key::Character("$"),
        keysyms::XKB_KEY_percent => Key::Character("%"),
        keysyms::XKB_KEY_caret => Key::Character("^"),
        keysyms::XKB_KEY_asciicircum => Key::Character("^"),
        keysyms::XKB_KEY_ampersand => Key::Character("&"),
        keysyms::XKB_KEY_asterisk => Key::Character("*"),
        keysyms::XKB_KEY_parenleft => Key::Character("("),
        keysyms::XKB_KEY_parenright => Key::Character(")"),
        keysyms::XKB_KEY_underscore => Key::Character("_"),
        keysyms::XKB_KEY_plus => Key::Character("+"),
        // => Key::Ax,
        keysyms::XKB_KEY_backslash => Key::Character("\\"),
        keysyms::XKB_KEY_XF86Calculator => Key::LaunchApplication2,
        // => Key::Capital,
        keysyms::XKB_KEY_colon => Key::Character(":"),
        keysyms::XKB_KEY_comma => Key::Character(","),
        keysyms::XKB_KEY_less => Key::Character("<"),
        keysyms::XKB_KEY_period => Key::Character("."),
        keysyms::XKB_KEY_greater => Key::Character(">"),
        // => Key::Convert,
        keysyms::XKB_KEY_equal => Key::Character("="),
        keysyms::XKB_KEY_grave => Key::Character("`"),
        // => Key::Kana,
        keysyms::XKB_KEY_Kanji => Key::KanjiMode,
        keysyms::XKB_KEY_Alt_L => Key::Alt,
        keysyms::XKB_KEY_Control_L => Key::Control,
        keysyms::XKB_KEY_Shift_L => Key::Shift,
        keysyms::XKB_KEY_Super_L => Key::Super,
        keysyms::XKB_KEY_XF86Mail => Key::LaunchMail,
        // => Key::MediaSelect,
        // => Key::MediaStop,
        keysyms::XKB_KEY_minus => Key::Character("-"),
        keysyms::XKB_KEY_XF86AudioMute => Key::AudioVolumeMute,
        // => Key::MyComputer,
        keysyms::XKB_KEY_XF86AudioNext => Key::MediaTrackNext,
        // => Key::NoConvert,
        keysyms::XKB_KEY_KP_Separator => Key::Character(","),
        keysyms::XKB_KEY_KP_Enter => Key::Enter,
        keysyms::XKB_KEY_KP_Equal => Key::Character("="),
        keysyms::XKB_KEY_KP_Add => Key::Character("+"),
        keysyms::XKB_KEY_KP_Subtract => Key::Character("-"),
        keysyms::XKB_KEY_KP_Multiply => Key::Character("*"),
        keysyms::XKB_KEY_KP_Divide => Key::Character("/"),
        keysyms::XKB_KEY_KP_Decimal => Key::Character("."),
        keysyms::XKB_KEY_KP_Page_Up => Key::PageUp,
        keysyms::XKB_KEY_KP_Page_Down => Key::PageDown,
        keysyms::XKB_KEY_KP_Home => Key::Home,
        keysyms::XKB_KEY_KP_End => Key::End,
        keysyms::XKB_KEY_KP_Left => Key::ArrowLeft,
        keysyms::XKB_KEY_KP_Up => Key::ArrowUp,
        keysyms::XKB_KEY_KP_Right => Key::ArrowRight,
        keysyms::XKB_KEY_KP_Down => Key::ArrowDown,
        // => Key::OEM102,
        // => Key::Playpause,
        keysyms::XKB_KEY_XF86PowerOff => Key::Power,
        keysyms::XKB_KEY_XF86AudioPrev => Key::MediaTrackPrevious,
        keysyms::XKB_KEY_Alt_R => Key::Alt,
        keysyms::XKB_KEY_bracketright => Key::Character("]"),
        keysyms::XKB_KEY_bracketleft => Key::Character("]"),
        keysyms::XKB_KEY_Control_R => Key::Control,
        keysyms::XKB_KEY_Shift_R => Key::Shift,
        keysyms::XKB_KEY_Super_R => Key::Super,
        keysyms::XKB_KEY_semicolon => Key::Character(";"),
        keysyms::XKB_KEY_slash => Key::Character("/"),
        keysyms::XKB_KEY_XF86Sleep => Key::Standby,
        // => Key::Stop,
        // => Key::Sysrq,
        keysyms::XKB_KEY_Tab => Key::Tab,
        keysyms::XKB_KEY_ISO_Left_Tab => Key::Tab,
        // => Key::Unlabeled,
        keysyms::XKB_KEY_XF86AudioLowerVolume => Key::AudioVolumeDown,
        keysyms::XKB_KEY_XF86AudioRaiseVolume => Key::AudioVolumeUp,
        // => Key::Wake,
        // => Key::Webback,
        // => Key::WebFavorites,
        // => Key::WebForward,
        // => Key::WebHome,
        // => Key::WebRefresh,
        // => Key::WebSearch,
        // => Key::WebStop,
        keysyms::XKB_KEY_yen => Key::Character("¥"),
        keysyms::XKB_KEY_XF86Copy => Key::Copy,
        keysyms::XKB_KEY_XF86Paste => Key::Paste,
        keysyms::XKB_KEY_XF86Cut => Key::Cut,
        // Fallback.
        _ => Key::Unidentified(NativeKeyCode::XKB(keysym)),
    }
}

pub fn keysym_to_location(keysym: u32) -> KeyLocation {
    use sctk::seat::keyboard::keysyms;
    match keysym {
        keysyms::XKB_KEY_KP_0 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_1 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_2 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_3 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_4 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_5 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_6 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_7 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_8 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_9 => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Separator => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Enter => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Equal => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Add => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Subtract => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Multiply => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Divide => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Decimal => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Page_Up => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Page_Down => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Home => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_End => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Left => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Up => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Right => KeyLocation::Numpad,
        keysyms::XKB_KEY_KP_Down => KeyLocation::Numpad,
        keysyms::XKB_KEY_Control_L => KeyLocation::Left,
        keysyms::XKB_KEY_Alt_L => KeyLocation::Left,
        keysyms::XKB_KEY_Shift_L => KeyLocation::Left,
        keysyms::XKB_KEY_Super_L => KeyLocation::Left,
        keysyms::XKB_KEY_Alt_R => KeyLocation::Right,
        keysyms::XKB_KEY_Control_R => KeyLocation::Right,
        keysyms::XKB_KEY_Shift_R => KeyLocation::Right,
        keysyms::XKB_KEY_Super_R => KeyLocation::Right,
        keysyms::XKB_KEY_ISO_Left_Tab => KeyLocation::Left,
        // Fallback
        _ => KeyLocation::Standard,
    }
}

